{"ast":null,"code":"import _classCallCheck from \"C:\\\\git\\\\react-app-test\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\git\\\\react-app-test\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\git\\\\react-app-test\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\git\\\\react-app-test\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\git\\\\react-app-test\\\\streams\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\git\\\\react-app-test\\\\streams\\\\client\\\\src\\\\components\\\\StreamsComponents\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      console.log(meta);\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"on\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, meta.error));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        className: \"ui form\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter the title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter the description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n  if (!formValues.title) errors.title = 'You must enter a title';\n  if (!formValues.description) errors.description = 'You must enter a description';\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["C:\\git\\react-app-test\\streams\\client\\src\\components\\StreamsComponents\\StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","input","label","meta","console","log","error","formValues","props","handleSubmit","onSubmit","renderInput","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;sCACkC;AAAA,UAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,UAAfC,KAAe,QAAfA,KAAe;AAAA,UAARC,IAAQ,QAARA,IAAQ;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAME,IAAI,CAACG,KAAX,CAHJ,CADJ;AAOH;;;6BAEQC,U,EAAY;AACjBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACH;;;6BAES;AACN,aACI;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,iBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,uBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAII;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,CADJ;AAQH;;;;EAzBsBd,KAAK,CAACe,S;;AA4BjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACN,UAAD,EAAgB;AAC7B,MAAMO,MAAM,GAAG,EAAf;AAEA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EACID,MAAM,CAACC,KAAP,GAAe,wBAAf;AACJ,MAAI,CAACR,UAAU,CAACS,WAAhB,EACIF,MAAM,CAACE,WAAP,GAAqB,8BAArB;AAEJ,SAAOF,MAAP;AACH,CATD;;AAWA,eAAef,SAAS,CAAC;AACrBkB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZb,YAHY,CAAf","sourcesContent":["import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nclass StreamCreate extends React.Component {\r\n    renderInput({ input, label, meta }) {\r\n        console.log(meta);\r\n        return (\r\n            <div className=\"field\">\r\n                <label>{label}</label>\r\n                <input {...input} autoComplete=\"on\" />\r\n                <div>{meta.error}</div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    onSubmit(formValues) {\r\n        console.log(formValues);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <form className=\"ui form\" onSubmit={this.props.handleSubmit(this.onSubmit)} >\r\n                <Field name=\"title\" component={this.renderInput} label=\"Enter the title\" />\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter the description\" />\r\n            \r\n                <button className=\"ui button primary\">Submit</button>\r\n            </form>\r\n        ); \r\n    }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {};\r\n\r\n    if (!formValues.title)\r\n        errors.title = 'You must enter a title' ;\r\n    if (!formValues.description)\r\n        errors.description = 'You must enter a description' ;\r\n\r\n    return errors;\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'streamCreate',\r\n    validate: validate\r\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}